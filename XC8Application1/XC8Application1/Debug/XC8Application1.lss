
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000fe4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b4  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099a  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000035a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a01  00000000  00000000  00003cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000046ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 04 	jmp	0x892	; 0x892 <__ctors_end>
   4:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
   8:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
   c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  10:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  14:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  18:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  1c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  20:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  24:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  28:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  2c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  30:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  34:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  38:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  3c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  40:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  44:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  48:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  4c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  50:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  54:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  58:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  5c:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  60:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>
  64:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	57 6f       	ori	r21, 0xF7	; 247
  6a:	72 6c       	ori	r23, 0xC2	; 194
  6c:	64 5f       	subi	r22, 0xF4	; 244
	...

0000006f <__c.2235>:
  6f:	48 65 6c 6c 6f 00                                   Hello.

00000075 <ssd1306_init_cmd>:
  75:	ae e3 20 00 b0 c8 00 10 40 a4 a1 a6 81 ff a8 3f     .. .....@......?
  85:	d3 00 d5 f0 d9 22 da 12 db 20 8d 14 af              ....."... ...

00000092 <font>:
	...
  9a:	7e 81 95 b1 b1 95 81 7e 7e ff eb cf cf eb ff 7e     ~......~~......~
  aa:	0e 1f 3f 7e 3f 1f 0e 00 08 1c 3e 7f 3e 1c 08 00     ..?~?.....>.>...
  ba:	38 3a 9f ff 9f 3a 38 00 10 38 bc ff bc 38 10 00     8:...:8..8...8..
	...
  ea:	70 f8 88 88 fd 7f 07 0f 00 4e 5f f1 f1 5f 4e 00     p........N_.._N.
	...
 102:	c0 ff 7f 05 05 65 7f 3f 99 5a 3c e7 e7 3c 5a 99     .....e.?.Z<..<Z.
 112:	7f 3e 3e 1c 1c 08 08 00 08 08 1c 1c 3e 3e 7f 00     .>>.........>>..
 122:	00 24 66 ff ff 66 24 00 00 5f 5f 00 00 5f 5f 00     .$f..f$..__..__.
 132:	06 0f 09 7f 7f 01 7f 7f da bf a5 a5 fd 59 03 02     .............Y..
 142:	00 70 70 70 70 70 70 00 80 94 b6 ff ff b6 94 80     .pppppp.........
 152:	00 04 06 7f 7f 06 04 00 00 10 30 7f 7f 30 10 00     ..........0..0..
 162:	08 08 08 2a 3e 1c 08 00 08 1c 3e 2a 08 08 08 00     ...*>.....>*....
 172:	3c 3c 20 20 20 20 20 00 08 1c 3e 08 08 3e 1c 08     <<     ...>..>..
 182:	30 38 3c 3e 3e 3c 38 30 06 0e 1e 3e 3e 1e 0e 06     08<>><80...>>...
	...
 19a:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
 1aa:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
 1ba:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
 1ca:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
 1da:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
 1ea:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
 1fa:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
 20a:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
 21a:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
 22a:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
 23a:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
 24a:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
 25a:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
 26a:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
 27a:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
 28a:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
 29a:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
 2aa:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
 2ba:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
 2ca:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
 2da:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
 2ea:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
 2fa:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
 30a:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
 31a:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
 32a:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
 33a:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
 34a:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
 35a:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
 36a:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
 37a:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
 38a:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
 39a:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
 3aa:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
 3ba:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
 3ca:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
 3da:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
 3ea:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
 3fa:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
 40a:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
 41a:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
 42a:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
 43a:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
 44a:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
 45a:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
 46a:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
 47a:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
 48a:	78 7c 46 43 46 7c 78 00 1e bf e1 61 33 12 00 00     x|FCF|x....a3...
 49a:	3a 7a 40 40 7a 7a 40 00 38 7c 56 57 5d 18 00 00     :z@@zz@.8|VW]...
 4aa:	02 23 75 55 55 7d 7b 42 21 75 54 54 7d 79 40 00     .#uUU}{B!uTT}y@.
 4ba:	20 75 57 56 7c 78 40 00 00 22 77 55 55 7f 7a 40      uWV|x@.."wUU.z@
 4ca:	1c be e2 62 36 14 00 00 02 3b 7d 55 55 5d 1b 02     ...b6....;}UU]..
 4da:	39 7d 54 54 5d 19 00 00 38 7d 57 56 5c 18 00 00     9}TT]...8}WV\...
 4ea:	01 45 7c 7c 41 01 00 00 02 03 45 7d 7d 43 02 00     .E||A.....E}}C..
 4fa:	00 45 7f 7e 40 00 00 00 79 7d 26 26 7d 79 00 00     .E.~@...y}&&}y..
 50a:	70 7a 2d 2d 7a 70 00 00 44 7c 7e 57 55 44 00 00     pz--zp..D|~WUD..
 51a:	20 74 54 54 7c 7c 54 54 7c 7e 0b 09 7f 7f 49 00      tTT||TT|~....I.
 52a:	32 7b 49 49 7b 32 00 00 32 7a 48 48 7a 32 00 00     2{II{2..2zHHz2..
 53a:	30 79 4b 4a 78 30 00 00 3a 7b 41 41 7b 7a 40 00     0yKJx0..:{AA{z@.
 54a:	38 79 43 42 78 78 40 00 ba ba a0 a0 fa 7a 00 00     8yCBxx@......z..
 55a:	39 7d 44 44 44 7d 39 00 3d 7d 40 40 7d 3d 00 00     9}DDD}9.=}@@}=..
 56a:	38 7c 64 54 4c 7c 38 00 68 7e 7f 49 43 66 20 00     8|dTL|8.h~.ICf .
 57a:	5c 3e 73 49 67 3e 1d 00 44 6c 38 38 6c 44 00 00     \>sIg>..Dl88lD..
 58a:	40 c8 88 fe 7f 09 0b 02 20 74 56 57 7d 78 40 00     @....... tVW}x@.
 59a:	00 44 7e 7f 41 00 00 00 30 78 48 4a 7b 31 00 00     .D~.A...0xHJ{1..
 5aa:	38 78 40 42 7b 79 40 00 7a 7b 09 0b 7a 73 01 00     8x@B{y@.z{..zs..
 5ba:	7a 7b 19 33 7a 7b 01 00 00 26 2f 29 2f 2f 28 00     z{.3z{...&/)//(.
 5ca:	00 26 2f 29 29 2f 26 00 30 78 4d 45 60 20 00 00     .&/))/&.0xME` ..
 5da:	1c 22 7d 4b 5b 65 22 1c 08 08 08 08 38 38 00 00     ."}K[e".....88..
 5ea:	61 3f 1f cc ee ab b9 90 61 3f 1f 4c 66 73 d9 f8     a?......a?.Lfs..
 5fa:	00 00 60 fa fa 60 00 00 08 1c 36 22 08 1c 36 22     ..`..`....6"..6"
 60a:	22 36 1c 08 22 36 1c 08 aa 00 55 00 aa 00 55 00     "6.."6....U...U.
 61a:	aa 55 aa 55 aa 55 aa 55 55 ff aa ff 55 ff aa ff     .U.U.U.UU...U...
 62a:	00 00 00 ff ff 00 00 00 10 10 10 ff ff 00 00 00     ................
 63a:	70 78 2c 2e 7b 71 00 00 72 79 2d 2d 79 72 00 00     px,.{q..ry--yr..
 64a:	71 7b 2e 2c 78 70 00 00 1c 22 5d 55 55 41 22 1c     q{.,xp..."]UUA".
 65a:	14 14 f7 f7 00 ff ff 00 00 00 ff ff 00 ff ff 00     ................
 66a:	14 14 f4 f4 04 fc fc 00 14 14 17 17 10 1f 1f 00     ................
 67a:	18 3c 24 e7 e7 24 24 00 2b 2f fc fc 2f 2b 00 00     .<$..$$.+/../+..
 68a:	10 10 10 f0 f0 00 00 00 00 00 00 1f 1f 10 10 10     ................
 69a:	10 10 10 1f 1f 10 10 10 10 10 10 f0 f0 10 10 10     ................
 6aa:	00 00 00 ff ff 10 10 10 10 10 10 10 10 10 10 10     ................
 6ba:	10 10 10 ff ff 10 10 10 22 77 55 57 7e 7b 41 00     ........"wUW~{A.
 6ca:	72 7b 2d 2f 7a 73 01 00 00 00 1f 1f 10 17 17 14     r{-/zs..........
 6da:	00 00 fc fc 04 f4 f4 14 14 14 17 17 10 17 17 14     ................
 6ea:	14 14 f4 f4 04 f4 f4 14 00 00 ff ff 00 f7 f7 14     ................
 6fa:	14 14 14 14 14 14 14 14 14 14 f7 f7 00 f7 f7 14     ................
 70a:	66 3c 3c 24 3c 3c 66 00 05 27 72 57 7d 38 00 00     f<<$<<f..'rW}8..
 71a:	49 7f 7f 49 63 7f 1c 00 46 7d 7d 55 55 46 00 00     I..Ic...F}}UUF..
 72a:	45 7d 7c 54 55 45 00 00 44 7d 7f 56 54 44 00 00     E}|TUE..D}.VTD..
 73a:	0a 0e 08 00 00 00 00 00 00 44 7e 7f 45 00 00 00     .........D~.E...
 74a:	02 45 7d 7d 45 02 00 00 01 45 7c 7c 45 01 00 00     .E}}E....E||E...
 75a:	10 10 10 1f 1f 00 00 00 00 00 00 f0 f0 10 10 10     ................
 76a:	ff ff ff ff ff ff ff ff f0 f0 f0 f0 f0 f0 f0 f0     ................
 77a:	00 00 00 77 77 00 00 00 00 45 7f 7e 44 00 00 00     ...ww....E.~D...
 78a:	0f 0f 0f 0f 0f 0f 0f 0f 38 7c 46 47 45 7c 38 00     ........8|FGE|8.
 79a:	fc fe 2a 2a 3e 14 00 00 3a 7d 45 45 45 7d 3a 00     ..**>...:}EEE}:.
 7aa:	38 7c 45 47 46 7c 38 00 32 7b 49 4b 7a 33 01 00     8|EGF|8.2{IKz3..
 7ba:	3a 7f 45 47 46 7f 39 00 80 fe 7e 20 20 3e 1e 00     :.EGF.9...~  >..
 7ca:	42 7e 7e 54 1c 08 00 00 41 7f 7f 55 14 1c 08 00     B~~T....A..U....
 7da:	3c 7c 42 43 7d 3c 00 00 3a 79 41 41 79 3a 00 00     <|BC}<..:yAAy:..
 7ea:	3c 7d 43 42 7c 3c 00 00 b8 b8 a2 a3 f9 78 00 00     <}CB|<.......x..
 7fa:	0c 5c 72 73 5d 0c 00 00 02 02 02 02 02 02 00 00     .\rs]...........
 80a:	00 00 02 03 01 00 00 00 10 10 10 10 10 10 00 00     ................
 81a:	44 44 5f 5f 44 44 00 00 28 28 28 28 28 28 00 00     DD__DD..((((((..
 82a:	71 35 1f 4c 66 73 d9 f8 06 0f 09 7f 7f 01 7f 7f     q5.Lfs..........
 83a:	da bf a5 a5 fd 59 03 02 08 08 6b 6b 08 08 00 00     .....Y....kk....
 84a:	00 80 c0 40 00 00 00 00 00 06 0f 09 0f 06 00 00     ...@............
 85a:	02 02 00 00 02 02 00 00 00 00 00 10 10 00 00 00     ................
 86a:	00 12 13 1f 1f 10 10 00 00 11 15 15 1f 1f 0a 00     ................
 87a:	00 19 1d 15 17 12 00 00 00 00 3c 3c 3c 3c 00 00     ..........<<<<..
	...

00000892 <__ctors_end>:
 892:	11 24       	eor	r1, r1
 894:	1f be       	out	0x3f, r1	; 63
 896:	cf ef       	ldi	r28, 0xFF	; 255
 898:	d8 e0       	ldi	r29, 0x08	; 8
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	cd bf       	out	0x3d, r28	; 61

0000089e <__do_clear_bss>:
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	a0 e0       	ldi	r26, 0x00	; 0
 8a2:	b1 e0       	ldi	r27, 0x01	; 1
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <.do_clear_bss_start>

000008a6 <.do_clear_bss_loop>:
 8a6:	1d 92       	st	X+, r1

000008a8 <.do_clear_bss_start>:
 8a8:	a3 30       	cpi	r26, 0x03	; 3
 8aa:	b2 07       	cpc	r27, r18
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <.do_clear_bss_loop>
 8ae:	0e 94 82 04 	call	0x904	; 0x904 <main>
 8b2:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <_exit>

000008b6 <__bad_interrupt>:
 8b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008ba <PWM_G_INIT>:
#include "oled_ssd1306.h"
#include <avr/interrupt.h>

void PWM_G_INIT()
{
	TCCR0A |=((1<<WGM00)  | (1<<WGM01)); 
 8ba:	84 b5       	in	r24, 0x24	; 36
 8bc:	83 60       	ori	r24, 0x03	; 3
 8be:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=((1<<COM0A0) | (1<<COM0A1));
 8c0:	84 b5       	in	r24, 0x24	; 36
 8c2:	80 6c       	ori	r24, 0xC0	; 192
 8c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=((1<<CS00)	  | (1<<CS02)); 
 8c6:	85 b5       	in	r24, 0x25	; 37
 8c8:	85 60       	ori	r24, 0x05	; 5
 8ca:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 8cc:	17 bc       	out	0x27, r1	; 39
 8ce:	08 95       	ret

000008d0 <PWM_R_INIT>:
}
void PWM_R_INIT()
{
	TCCR0A |=((1<<COM0B0)  | (1<<COM0B1));
 8d0:	84 b5       	in	r24, 0x24	; 36
 8d2:	80 63       	ori	r24, 0x30	; 48
 8d4:	84 bd       	out	0x24, r24	; 36
	OCR0B = 0;
 8d6:	18 bc       	out	0x28, r1	; 40
 8d8:	08 95       	ret

000008da <PWM_B_INIT>:
}

void PWM_B_INIT()
{
	TCCR1A |=(1<<WGM10);//WGM = Waveform Generator Mode Fast PWM 8 Bit Modus
 8da:	a0 e8       	ldi	r26, 0x80	; 128
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	8c 91       	ld	r24, X
 8e0:	81 60       	ori	r24, 0x01	; 1
 8e2:	8c 93       	st	X, r24
	TCCR1B |=(1<<WGM12);
 8e4:	e1 e8       	ldi	r30, 0x81	; 129
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	88 60       	ori	r24, 0x08	; 8
 8ec:	80 83       	st	Z, r24
	TCCR1A |=((1<<COM1A0)  | (1<<COM1A1)); //inverting mode - common anode
 8ee:	8c 91       	ld	r24, X
 8f0:	80 6c       	ori	r24, 0xC0	; 192
 8f2:	8c 93       	st	X, r24
	TCCR1B |=((1<<CS10)  | (1<<CS12));
 8f4:	80 81       	ld	r24, Z
 8f6:	85 60       	ori	r24, 0x05	; 5
 8f8:	80 83       	st	Z, r24
	OCR1A = 0;
 8fa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 8fe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 902:	08 95       	ret

00000904 <main>:
}

int main(void)
{
	DDRD|=(1<<5); //R
 904:	8a b1       	in	r24, 0x0a	; 10
 906:	80 62       	ori	r24, 0x20	; 32
 908:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<6); //G
 90a:	8a b1       	in	r24, 0x0a	; 10
 90c:	80 64       	ori	r24, 0x40	; 64
 90e:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<1); //B
 910:	84 b1       	in	r24, 0x04	; 4
 912:	82 60       	ori	r24, 0x02	; 2
 914:	84 b9       	out	0x04, r24	; 4
	
	PWM_G_INIT();
 916:	0e 94 5d 04 	call	0x8ba	; 0x8ba <PWM_G_INIT>
	PWM_R_INIT();
 91a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <PWM_R_INIT>
	PWM_B_INIT();
 91e:	0e 94 6d 04 	call	0x8da	; 0x8da <PWM_B_INIT>
	
	oled_init();
 922:	0e 94 65 05 	call	0xaca	; 0xaca <oled_init>
	oled_font_size(2);
 926:	82 e0       	ldi	r24, 0x02	; 2
 928:	0e 94 7f 05 	call	0xafe	; 0xafe <oled_font_size>
	oled_gotoxy(0,1);
 92c:	61 e0       	ldi	r22, 0x01	; 1
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
	oled_write("Hello");
 934:	8f e6       	ldi	r24, 0x6F	; 111
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	9f 93       	push	r25
 93a:	8f 93       	push	r24
 93c:	0e 94 65 06 	call	0xcca	; 0xcca <oled_write_P>
	oled_gotoxy(0,6);
 940:	66 e0       	ldi	r22, 0x06	; 6
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
	oled_write("World_");
 948:	88 e6       	ldi	r24, 0x68	; 104
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	9f 93       	push	r25
 94e:	8f 93       	push	r24
 950:	0e 94 65 06 	call	0xcca	; 0xcca <oled_write_P>
	sei(); //Set interrupts -- globales Flag, damit die interrupts enabled werden --> cli = "clear all interrups"
 954:	78 94       	sei
	OCR0A = 0; //Helligkeit der jeweiligen LED 0 ist LOW und 255 ist HIGH
 956:	17 bc       	out	0x27, r1	; 39
	OCR0B = 255;
 958:	8f ef       	ldi	r24, 0xFF	; 255
 95a:	88 bd       	out	0x28, r24	; 40
	OCR1A = 22; 
 95c:	86 e1       	ldi	r24, 0x16	; 22
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 964:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
    /* Replace with your application code */
    while (1) 
    {
		PORTD|=(1<<5);
 970:	8b b1       	in	r24, 0x0b	; 11
 972:	80 62       	ori	r24, 0x20	; 32
 974:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 976:	2f ef       	ldi	r18, 0xFF	; 255
 978:	89 e6       	ldi	r24, 0x69	; 105
 97a:	98 e1       	ldi	r25, 0x18	; 24
 97c:	21 50       	subi	r18, 0x01	; 1
 97e:	80 40       	sbci	r24, 0x00	; 0
 980:	90 40       	sbci	r25, 0x00	; 0
 982:	e1 f7       	brne	.-8      	; 0x97c <main+0x78>
 984:	00 c0       	rjmp	.+0      	; 0x986 <main+0x82>
 986:	00 00       	nop
		_delay_ms(500);
		PORTD &= ~(1<<5);
 988:	8b b1       	in	r24, 0x0b	; 11
 98a:	8f 7d       	andi	r24, 0xDF	; 223
 98c:	8b b9       	out	0x0b, r24	; 11
 98e:	2f ef       	ldi	r18, 0xFF	; 255
 990:	89 e6       	ldi	r24, 0x69	; 105
 992:	98 e1       	ldi	r25, 0x18	; 24
 994:	21 50       	subi	r18, 0x01	; 1
 996:	80 40       	sbci	r24, 0x00	; 0
 998:	90 40       	sbci	r25, 0x00	; 0
 99a:	e1 f7       	brne	.-8      	; 0x994 <main+0x90>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <main+0x9a>
 99e:	00 00       	nop
 9a0:	e7 cf       	rjmp	.-50     	; 0x970 <main+0x6c>

000009a2 <i2c_init>:
CHARGE_BUMB_SETTING,	0x14, 
SET_DISPLAY_ON };

//***************************************************************************************
void i2c_init(void){
	I2C_PORT |= (1 << SDA_PIN | 1 << SCL_PIN);			//Port Pullup
 9a2:	88 b1       	in	r24, 0x08	; 8
 9a4:	80 63       	ori	r24, 0x30	; 48
 9a6:	88 b9       	out	0x08, r24	; 8
	TWCR = 0;
 9a8:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWSR = 0;
 9ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
 9b0:	8c e0       	ldi	r24, 0x0C	; 12
 9b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 9b6:	2f ef       	ldi	r18, 0xFF	; 255
 9b8:	80 e7       	ldi	r24, 0x70	; 112
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	80 40       	sbci	r24, 0x00	; 0
 9c0:	90 40       	sbci	r25, 0x00	; 0
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <i2c_init+0x1a>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <i2c_init+0x24>
 9c6:	00 00       	nop
 9c8:	08 95       	ret

000009ca <i2c_start>:
}

//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
 9ca:	84 ea       	ldi	r24, 0xA4	; 164
 9cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	_delay_ms(50);
}

//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
 9d0:	80 e0       	ldi	r24, 0x00	; 0
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <i2c_start+0x14>
	    if((timeout++) > 100) return 1;
 9d4:	91 e0       	ldi	r25, 0x01	; 1
 9d6:	98 0f       	add	r25, r24
 9d8:	85 36       	cpi	r24, 0x65	; 101
 9da:	c0 f4       	brcc	.+48     	; 0xa0c <i2c_start+0x42>
 9dc:	89 2f       	mov	r24, r25

//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
 9de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9e2:	99 23       	and	r25, r25
 9e4:	bc f7       	brge	.-18     	; 0x9d4 <i2c_start+0xa>
	    if((timeout++) > 100) return 1;
    }
    TWDR = OLED_I2C_ADDR;
 9e6:	88 e7       	ldi	r24, 0x78	; 120
 9e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT | 1 << TWEN);
 9ec:	84 e8       	ldi	r24, 0x84	; 132
 9ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	timeout = 0;
 9f2:	80 e0       	ldi	r24, 0x00	; 0
    while(!(TWCR & (1<<TWINT))){
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <i2c_start+0x36>
	    if((timeout++) > 100) return 1;
 9f6:	91 e0       	ldi	r25, 0x01	; 1
 9f8:	98 0f       	add	r25, r24
 9fa:	85 36       	cpi	r24, 0x65	; 101
 9fc:	48 f4       	brcc	.+18     	; 0xa10 <i2c_start+0x46>
 9fe:	89 2f       	mov	r24, r25
	    if((timeout++) > 100) return 1;
    }
    TWDR = OLED_I2C_ADDR;
    TWCR = (1 << TWINT | 1 << TWEN);
	timeout = 0;
    while(!(TWCR & (1<<TWINT))){
 a00:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a04:	99 23       	and	r25, r25
 a06:	bc f7       	brge	.-18     	; 0x9f6 <i2c_start+0x2c>
	    if((timeout++) > 100) return 1;
    }
	return 0;
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	08 95       	ret
//***************************************************************************************
uint8_t i2c_start (void){
	uint8_t timeout = 0;
    TWCR = (1 << TWINT | 1 << TWSTA | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
	    if((timeout++) > 100) return 1;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	08 95       	ret
    }
    TWDR = OLED_I2C_ADDR;
    TWCR = (1 << TWINT | 1 << TWEN);
	timeout = 0;
    while(!(TWCR & (1<<TWINT))){
	    if((timeout++) > 100) return 1;
 a10:	81 e0       	ldi	r24, 0x01	; 1
    }
	return 0;
}
 a12:	08 95       	ret

00000a14 <i2c_byte>:

//***************************************************************************************
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
 a14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT | 1 << TWEN);
 a18:	84 e8       	ldi	r24, 0x84	; 132
 a1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return 0;
}

//***************************************************************************************
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
 a1e:	80 e0       	ldi	r24, 0x00	; 0
    TWDR = byte;
    TWCR = (1 << TWINT | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <i2c_byte+0x18>
		if((timeout++) > 100) return 1;
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	98 0f       	add	r25, r24
 a26:	85 36       	cpi	r24, 0x65	; 101
 a28:	38 f4       	brcc	.+14     	; 0xa38 <i2c_byte+0x24>
 a2a:	89 2f       	mov	r24, r25
//***************************************************************************************
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
    TWCR = (1 << TWINT | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
 a2c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a30:	99 23       	and	r25, r25
 a32:	bc f7       	brge	.-18     	; 0xa22 <i2c_byte+0xe>
		if((timeout++) > 100) return 1;
	}
	return 0;
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	08 95       	ret
uint8_t i2c_byte (uint8_t byte){  
	uint8_t timeout = 0;
    TWDR = byte;
    TWCR = (1 << TWINT | 1 << TWEN);
    while(!(TWCR & (1<<TWINT))){
		if((timeout++) > 100) return 1;
 a38:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 a3a:	08 95       	ret

00000a3c <i2c_stop>:

//***************************************************************************************
void i2c_stop (void){
    TWCR = (1 << TWINT | 1 << TWSTO | 1 << TWEN);
 a3c:	ec eb       	ldi	r30, 0xBC	; 188
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	84 e9       	ldi	r24, 0x94	; 148
 a42:	80 83       	st	Z, r24
	TWCR = 0;
 a44:	10 82       	st	Z, r1
 a46:	08 95       	ret

00000a48 <oled_gotoxy>:
    i2c_stop();
	oled_gotoxy(0,0);
}

//***************************************************************************************
void oled_gotoxy (uint8_t x, uint8_t y){
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	c8 2f       	mov	r28, r24
 a4e:	d6 2f       	mov	r29, r22
	oled_x = x;
 a50:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
	oled_y = y;
 a54:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <oled_y>
    i2c_start();		
 a58:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
    i2c_byte(COMMAND);
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
    i2c_byte(SET_PAGE_START|y);
 a62:	8d 2f       	mov	r24, r29
 a64:	80 6b       	ori	r24, 0xB0	; 176
 a66:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
	i2c_byte(SET_COLUMN_ADDRESS);
 a6a:	81 e2       	ldi	r24, 0x21	; 33
 a6c:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
    i2c_byte(x * 8);
 a70:	8c 2f       	mov	r24, r28
 a72:	88 0f       	add	r24, r24
 a74:	88 0f       	add	r24, r24
 a76:	88 0f       	add	r24, r24
 a78:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
	i2c_byte(SET_DISPLAY_START_LINE|0x3F);
 a7c:	8f e7       	ldi	r24, 0x7F	; 127
 a7e:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
    i2c_stop();			
 a82:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
}
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	08 95       	ret

00000a8c <oled_clear_screen>:
	i2c_stop();
    oled_clear_screen();
}

//***************************************************************************************
void oled_clear_screen (void){
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
	oled_gotoxy(0,0);
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
	i2c_start();
 a98:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
    i2c_byte(DATA);
 a9c:	80 e4       	ldi	r24, 0x40	; 64
 a9e:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
    for (uint16_t i = 0; i < 128<<4 ; i++) {	// 128 * (64 / Byte) 
 aa2:	c0 e0       	ldi	r28, 0x00	; 0
 aa4:	d0 e0       	ldi	r29, 0x00	; 0
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <oled_clear_screen+0x24>
        i2c_byte(0);	
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
//***************************************************************************************
void oled_clear_screen (void){
	oled_gotoxy(0,0);
	i2c_start();
    i2c_byte(DATA);
    for (uint16_t i = 0; i < 128<<4 ; i++) {	// 128 * (64 / Byte) 
 aae:	21 96       	adiw	r28, 0x01	; 1
 ab0:	c1 15       	cp	r28, r1
 ab2:	88 e0       	ldi	r24, 0x08	; 8
 ab4:	d8 07       	cpc	r29, r24
 ab6:	c0 f3       	brcs	.-16     	; 0xaa8 <oled_clear_screen+0x1c>
        i2c_byte(0);	
    }
    i2c_stop();
 ab8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
	oled_gotoxy(0,0);
 abc:	60 e0       	ldi	r22, 0x00	; 0
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
}
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <oled_init>:
    TWCR = (1 << TWINT | 1 << TWSTO | 1 << TWEN);
	TWCR = 0;
}

//***************************************************************************************
void oled_init (void){
 aca:	cf 93       	push	r28
	i2c_init();
 acc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <i2c_init>
	i2c_start();
 ad0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
	i2c_byte(COMMAND);
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
	for (uint8_t tmp = 0; tmp< sizeof(ssd1306_init_cmd); tmp++) {	
 ada:	c0 e0       	ldi	r28, 0x00	; 0
 adc:	08 c0       	rjmp	.+16     	; 0xaee <oled_init+0x24>
		i2c_byte(pgm_read_byte(&ssd1306_init_cmd[tmp]));
 ade:	ec 2f       	mov	r30, r28
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	eb 58       	subi	r30, 0x8B	; 139
 ae4:	ff 4f       	sbci	r31, 0xFF	; 255
 ae6:	84 91       	lpm	r24, Z
 ae8:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
//***************************************************************************************
void oled_init (void){
	i2c_init();
	i2c_start();
	i2c_byte(COMMAND);
	for (uint8_t tmp = 0; tmp< sizeof(ssd1306_init_cmd); tmp++) {	
 aec:	cf 5f       	subi	r28, 0xFF	; 255
 aee:	cd 31       	cpi	r28, 0x1D	; 29
 af0:	b0 f3       	brcs	.-20     	; 0xade <oled_init+0x14>
		i2c_byte(pgm_read_byte(&ssd1306_init_cmd[tmp]));
	}
	i2c_stop();
 af2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
    oled_clear_screen();
 af6:	0e 94 46 05 	call	0xa8c	; 0xa8c <oled_clear_screen>
}
 afa:	cf 91       	pop	r28
 afc:	08 95       	ret

00000afe <oled_font_size>:
    i2c_stop();			
}

//***************************************************************************************
void oled_font_size (uint8_t byte){
	font_size = byte;
 afe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 b02:	08 95       	ret

00000b04 <oled_write_char>:
}

//***************************************************************************************
void oled_write_char (char c){
 b04:	df 92       	push	r13
 b06:	ef 92       	push	r14
 b08:	ff 92       	push	r15
 b0a:	0f 93       	push	r16
 b0c:	1f 93       	push	r17
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	08 2f       	mov	r16, r24
	if(font_size != 0){		
 b14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b18:	88 23       	and	r24, r24
 b1a:	09 f4       	brne	.+2      	; 0xb1e <oled_write_char+0x1a>
 b1c:	9b c0       	rjmp	.+310    	; 0xc54 <oled_write_char+0x150>
		uint8_t tmp = 0;
		oled_gotoxy(oled_x,oled_y);
 b1e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
 b22:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
 b26:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
		i2c_start();
 b2a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
		i2c_byte(DATA);
 b2e:	80 e4       	ldi	r24, 0x40	; 64
 b30:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
		for (uint8_t count = 0; count < 8; count++){
 b34:	10 e0       	ldi	r17, 0x00	; 0
 b36:	35 c0       	rjmp	.+106    	; 0xba2 <oled_write_char+0x9e>
			tmp = pgm_read_byte(&font[(unsigned char)c][count]);
 b38:	e0 2f       	mov	r30, r16
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	ee 0f       	add	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	ee 0f       	add	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	ee 0f       	add	r30, r30
 b46:	ff 1f       	adc	r31, r31
 b48:	e1 0f       	add	r30, r17
 b4a:	f1 1d       	adc	r31, r1
 b4c:	ee 56       	subi	r30, 0x6E	; 110
 b4e:	ff 4f       	sbci	r31, 0xFF	; 255
 b50:	84 91       	lpm	r24, Z
			tmp = tmp & 0x0f;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
 b52:	80 fb       	bst	r24, 0
 b54:	ee 24       	eor	r14, r14
 b56:	e0 f8       	bld	r14, 0
 b58:	f1 2c       	mov	r15, r1
 b5a:	e8 2f       	mov	r30, r24
 b5c:	e2 70       	andi	r30, 0x02	; 2
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	ee 0d       	add	r30, r14
 b66:	ff 1d       	adc	r31, r15
 b68:	28 2f       	mov	r18, r24
 b6a:	24 70       	andi	r18, 0x04	; 4
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	22 0f       	add	r18, r18
 b70:	33 1f       	adc	r19, r19
 b72:	22 0f       	add	r18, r18
 b74:	33 1f       	adc	r19, r19
 b76:	e2 0f       	add	r30, r18
 b78:	f3 1f       	adc	r31, r19
 b7a:	88 70       	andi	r24, 0x08	; 8
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	88 0f       	add	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	88 0f       	add	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	e8 0f       	add	r30, r24
 b8c:	f9 1f       	adc	r31, r25
 b8e:	de 2e       	mov	r13, r30
 b90:	dd 0c       	add	r13, r13
 b92:	de 0e       	add	r13, r30
			i2c_byte(tmp);
 b94:	8d 2d       	mov	r24, r13
 b96:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
			i2c_byte(tmp);
 b9a:	8d 2d       	mov	r24, r13
 b9c:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
	if(font_size != 0){		
		uint8_t tmp = 0;
		oled_gotoxy(oled_x,oled_y);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
 ba0:	1f 5f       	subi	r17, 0xFF	; 255
 ba2:	18 30       	cpi	r17, 0x08	; 8
 ba4:	48 f2       	brcs	.-110    	; 0xb38 <oled_write_char+0x34>
			tmp = tmp & 0x0f;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
			i2c_byte(tmp);
			i2c_byte(tmp);
		}
		i2c_stop();
 ba6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
		oled_gotoxy(oled_x,oled_y + 1);
 baa:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
 bae:	6f 5f       	subi	r22, 0xFF	; 255
 bb0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
 bb4:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
		i2c_start();
 bb8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
		i2c_byte(DATA);
 bbc:	80 e4       	ldi	r24, 0x40	; 64
 bbe:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
		for (uint8_t count = 0; count < 8; count++){
 bc2:	10 e0       	ldi	r17, 0x00	; 0
 bc4:	38 c0       	rjmp	.+112    	; 0xc36 <oled_write_char+0x132>
			tmp = pgm_read_byte(&font[(unsigned char)c][count]);
 bc6:	e0 2f       	mov	r30, r16
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	ee 0f       	add	r30, r30
 bcc:	ff 1f       	adc	r31, r31
 bce:	ee 0f       	add	r30, r30
 bd0:	ff 1f       	adc	r31, r31
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	e1 0f       	add	r30, r17
 bd8:	f1 1d       	adc	r31, r1
 bda:	ee 56       	subi	r30, 0x6E	; 110
 bdc:	ff 4f       	sbci	r31, 0xFF	; 255
 bde:	24 91       	lpm	r18, Z
			tmp = (tmp & 0xf0)>>4;
 be0:	22 95       	swap	r18
 be2:	2f 70       	andi	r18, 0x0F	; 15
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
 be4:	82 2f       	mov	r24, r18
 be6:	81 70       	andi	r24, 0x01	; 1
 be8:	c8 2f       	mov	r28, r24
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	d8 2f       	mov	r29, r24
 bee:	82 2f       	mov	r24, r18
 bf0:	82 70       	andi	r24, 0x02	; 2
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	8c 0f       	add	r24, r28
 bfa:	9d 1f       	adc	r25, r29
 bfc:	42 2f       	mov	r20, r18
 bfe:	44 70       	andi	r20, 0x04	; 4
 c00:	50 e0       	ldi	r21, 0x00	; 0
 c02:	44 0f       	add	r20, r20
 c04:	55 1f       	adc	r21, r21
 c06:	44 0f       	add	r20, r20
 c08:	55 1f       	adc	r21, r21
 c0a:	84 0f       	add	r24, r20
 c0c:	95 1f       	adc	r25, r21
 c0e:	28 70       	andi	r18, 0x08	; 8
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	22 0f       	add	r18, r18
 c14:	33 1f       	adc	r19, r19
 c16:	22 0f       	add	r18, r18
 c18:	33 1f       	adc	r19, r19
 c1a:	22 0f       	add	r18, r18
 c1c:	33 1f       	adc	r19, r19
 c1e:	82 0f       	add	r24, r18
 c20:	93 1f       	adc	r25, r19
 c22:	f8 2e       	mov	r15, r24
 c24:	ff 0c       	add	r15, r15
 c26:	f8 0e       	add	r15, r24
			i2c_byte(tmp);
 c28:	8f 2d       	mov	r24, r15
 c2a:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
			i2c_byte(tmp);
 c2e:	8f 2d       	mov	r24, r15
 c30:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
		}
		i2c_stop();
		oled_gotoxy(oled_x,oled_y + 1);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
 c34:	1f 5f       	subi	r17, 0xFF	; 255
 c36:	18 30       	cpi	r17, 0x08	; 8
 c38:	30 f2       	brcs	.-116    	; 0xbc6 <oled_write_char+0xc2>
			tmp = (tmp & 0xf0)>>4;
			tmp = ((tmp&0x01)*3)+(((tmp&0x02)<<1)*3)+(((tmp&0x04)<<2)*3)+(((tmp&0x08)<<3)*3);
			i2c_byte(tmp);
			i2c_byte(tmp);
		}
		i2c_stop();
 c3a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
		oled_x +=2;
 c3e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
 c42:	8e 5f       	subi	r24, 0xFE	; 254
 c44:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
		oled_y -=1;
 c48:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <oled_y>
 c4c:	81 50       	subi	r24, 0x01	; 1
 c4e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <oled_y>
 c52:	26 c0       	rjmp	.+76     	; 0xca0 <oled_write_char+0x19c>
	}else{
		oled_gotoxy(oled_x,oled_y);
 c54:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <oled_y>
 c58:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
 c5c:	0e 94 24 05 	call	0xa48	; 0xa48 <oled_gotoxy>
		i2c_start();
 c60:	0e 94 e5 04 	call	0x9ca	; 0x9ca <i2c_start>
		i2c_byte(DATA);
 c64:	80 e4       	ldi	r24, 0x40	; 64
 c66:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
		for (uint8_t count = 0; count < 8; count++){
 c6a:	c0 e0       	ldi	r28, 0x00	; 0
 c6c:	10 c0       	rjmp	.+32     	; 0xc8e <oled_write_char+0x18a>
			i2c_byte(pgm_read_byte(&font[(unsigned char)c][count]));
 c6e:	e0 2f       	mov	r30, r16
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	ee 0f       	add	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	ee 0f       	add	r30, r30
 c78:	ff 1f       	adc	r31, r31
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	ec 0f       	add	r30, r28
 c80:	f1 1d       	adc	r31, r1
 c82:	ee 56       	subi	r30, 0x6E	; 110
 c84:	ff 4f       	sbci	r31, 0xFF	; 255
 c86:	84 91       	lpm	r24, Z
 c88:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_byte>
		oled_y -=1;
	}else{
		oled_gotoxy(oled_x,oled_y);
		i2c_start();
		i2c_byte(DATA);
		for (uint8_t count = 0; count < 8; count++){
 c8c:	cf 5f       	subi	r28, 0xFF	; 255
 c8e:	c8 30       	cpi	r28, 0x08	; 8
 c90:	70 f3       	brcs	.-36     	; 0xc6e <oled_write_char+0x16a>
			i2c_byte(pgm_read_byte(&font[(unsigned char)c][count]));
		}
		i2c_stop();
 c92:	0e 94 1e 05 	call	0xa3c	; 0xa3c <i2c_stop>
		oled_x +=1;
 c96:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <oled_x>
 c9a:	8f 5f       	subi	r24, 0xFF	; 255
 c9c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <oled_x>
	}
}
 ca0:	df 91       	pop	r29
 ca2:	cf 91       	pop	r28
 ca4:	1f 91       	pop	r17
 ca6:	0f 91       	pop	r16
 ca8:	ff 90       	pop	r15
 caa:	ef 90       	pop	r14
 cac:	df 90       	pop	r13
 cae:	08 95       	ret

00000cb0 <oled_write_str>:

//***************************************************************************************
void oled_write_str (char* str){
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	ec 01       	movw	r28, r24
    while (*str) {
 cb6:	03 c0       	rjmp	.+6      	; 0xcbe <oled_write_str+0xe>
        oled_write_char(*str++);
 cb8:	21 96       	adiw	r28, 0x01	; 1
 cba:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_write_char>
	}
}

//***************************************************************************************
void oled_write_str (char* str){
    while (*str) {
 cbe:	88 81       	ld	r24, Y
 cc0:	81 11       	cpse	r24, r1
 cc2:	fa cf       	rjmp	.-12     	; 0xcb8 <oled_write_str+0x8>
        oled_write_char(*str++);
    }
}
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	08 95       	ret

00000cca <oled_write_P>:

//***************************************************************************************
void oled_write_P (const char *Buffer,...)
{
 cca:	8f 92       	push	r8
 ccc:	9f 92       	push	r9
 cce:	af 92       	push	r10
 cd0:	bf 92       	push	r11
 cd2:	df 92       	push	r13
 cd4:	ef 92       	push	r14
 cd6:	ff 92       	push	r15
 cd8:	0f 93       	push	r16
 cda:	1f 93       	push	r17
 cdc:	cf 93       	push	r28
 cde:	df 93       	push	r29
 ce0:	cd b7       	in	r28, 0x3d	; 61
 ce2:	de b7       	in	r29, 0x3e	; 62
 ce4:	64 97       	sbiw	r28, 0x14	; 20
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	fe 01       	movw	r30, r28
 cf2:	b2 96       	adiw	r30, 0x22	; 34
 cf4:	01 91       	ld	r16, Z+
 cf6:	11 91       	ld	r17, Z+
	va_list ap;
	va_start (ap, Buffer);	
 cf8:	5f 01       	movw	r10, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
 cfa:	d1 2c       	mov	r13, r1
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
 cfc:	78 01       	movw	r14, r16
 cfe:	8f ef       	ldi	r24, 0xFF	; 255
 d00:	e8 1a       	sub	r14, r24
 d02:	f8 0a       	sbc	r15, r24
 d04:	f8 01       	movw	r30, r16
 d06:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
 d08:	88 23       	and	r24, r24
 d0a:	09 f4       	brne	.+2      	; 0xd0e <oled_write_P+0x44>
 d0c:	a5 c0       	rjmp	.+330    	; 0xe58 <oled_write_P+0x18e>
            
		if (by == '%'){
 d0e:	85 32       	cpi	r24, 0x25	; 37
 d10:	09 f0       	breq	.+2      	; 0xd14 <oled_write_P+0x4a>
 d12:	9e c0       	rjmp	.+316    	; 0xe50 <oled_write_P+0x186>
            by = pgm_read_byte(Buffer++);
 d14:	48 01       	movw	r8, r16
 d16:	f2 e0       	ldi	r31, 0x02	; 2
 d18:	8f 0e       	add	r8, r31
 d1a:	91 1c       	adc	r9, r1
 d1c:	f7 01       	movw	r30, r14
 d1e:	84 91       	lpm	r24, Z
			if (isdigit(by)>0){                   
 d20:	28 2f       	mov	r18, r24
 d22:	30 e0       	ldi	r19, 0x00	; 0
 d24:	20 53       	subi	r18, 0x30	; 48
 d26:	31 09       	sbc	r19, r1
 d28:	2a 30       	cpi	r18, 0x0A	; 10
 d2a:	31 05       	cpc	r19, r1
 d2c:	60 f4       	brcc	.+24     	; 0xd46 <oled_write_P+0x7c>
 				str_null_buffer[0] = by;
 d2e:	8b 87       	std	Y+11, r24	; 0x0b
				str_null_buffer[1] = '\0';
 d30:	1c 86       	std	Y+12, r1	; 0x0c
				move = atoi(str_null_buffer);
 d32:	ce 01       	movw	r24, r28
 d34:	0b 96       	adiw	r24, 0x0b	; 11
 d36:	0e 94 3e 07 	call	0xe7c	; 0xe7c <atoi>
 d3a:	d8 2e       	mov	r13, r24
                by = pgm_read_byte(Buffer++);
 d3c:	0d 5f       	subi	r16, 0xFD	; 253
 d3e:	1f 4f       	sbci	r17, 0xFF	; 255
 d40:	f4 01       	movw	r30, r8
 d42:	84 91       	lpm	r24, Z
 d44:	01 c0       	rjmp	.+2      	; 0xd48 <oled_write_P+0x7e>
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
 d46:	84 01       	movw	r16, r8
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
 d48:	89 36       	cpi	r24, 0x69	; 105
 d4a:	81 f1       	breq	.+96     	; 0xdac <oled_write_P+0xe2>
 d4c:	28 f4       	brcc	.+10     	; 0xd58 <oled_write_P+0x8e>
 d4e:	82 36       	cpi	r24, 0x62	; 98
 d50:	51 f0       	breq	.+20     	; 0xd66 <oled_write_P+0x9c>
 d52:	83 36       	cpi	r24, 0x63	; 99
 d54:	e9 f0       	breq	.+58     	; 0xd90 <oled_write_P+0xc6>
 d56:	d2 cf       	rjmp	.-92     	; 0xcfc <oled_write_P+0x32>
 d58:	83 37       	cpi	r24, 0x73	; 115
 d5a:	39 f0       	breq	.+14     	; 0xd6a <oled_write_P+0xa0>
 d5c:	88 37       	cpi	r24, 0x78	; 120
 d5e:	21 f1       	breq	.+72     	; 0xda8 <oled_write_P+0xde>
 d60:	8f 36       	cpi	r24, 0x6F	; 111
 d62:	61 f6       	brne	.-104    	; 0xcfc <oled_write_P+0x32>
 d64:	1f c0       	rjmp	.+62     	; 0xda4 <oled_write_P+0xda>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { oled_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
 d66:	42 e0       	ldi	r20, 0x02	; 2
 d68:	22 c0       	rjmp	.+68     	; 0xdae <oled_write_P+0xe4>
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
                case 's':
                    ptr = va_arg(ap,char *);
 d6a:	45 01       	movw	r8, r10
 d6c:	f2 e0       	ldi	r31, 0x02	; 2
 d6e:	8f 0e       	add	r8, r31
 d70:	91 1c       	adc	r9, r1
 d72:	f5 01       	movw	r30, r10
 d74:	e0 80       	ld	r14, Z
 d76:	f1 80       	ldd	r15, Z+1	; 0x01
                    while(*ptr) { oled_write_char(*ptr++); }
 d78:	05 c0       	rjmp	.+10     	; 0xd84 <oled_write_P+0xba>
 d7a:	ff ef       	ldi	r31, 0xFF	; 255
 d7c:	ef 1a       	sub	r14, r31
 d7e:	ff 0a       	sbc	r15, r31
 d80:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_write_char>
 d84:	f7 01       	movw	r30, r14
 d86:	80 81       	ld	r24, Z
 d88:	81 11       	cpse	r24, r1
 d8a:	f7 cf       	rjmp	.-18     	; 0xd7a <oled_write_P+0xb0>
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
                case 's':
                    ptr = va_arg(ap,char *);
 d8c:	54 01       	movw	r10, r8
 d8e:	b6 cf       	rjmp	.-148    	; 0xcfc <oled_write_P+0x32>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 d90:	75 01       	movw	r14, r10
 d92:	f2 e0       	ldi	r31, 0x02	; 2
 d94:	ef 0e       	add	r14, r31
 d96:	f1 1c       	adc	r15, r1
					oled_write_char (format_flag++);
 d98:	f5 01       	movw	r30, r10
 d9a:	80 81       	ld	r24, Z
 d9c:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_write_char>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
 da0:	57 01       	movw	r10, r14
					oled_write_char (format_flag++);
					break;
 da2:	ac cf       	rjmp	.-168    	; 0xcfc <oled_write_P+0x32>
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
 da4:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
 da6:	03 c0       	rjmp	.+6      	; 0xdae <oled_write_P+0xe4>
				case 'x':
					Base = 16;
 da8:	40 e1       	ldi	r20, 0x10	; 16
 daa:	01 c0       	rjmp	.+2      	; 0xdae <oled_write_P+0xe4>
					//Int to char
					format_flag = va_arg(ap,int);
					oled_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
 dac:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 dae:	50 e0       	ldi	r21, 0x00	; 0
 db0:	75 01       	movw	r14, r10
 db2:	f2 e0       	ldi	r31, 0x02	; 2
 db4:	ef 0e       	add	r14, r31
 db6:	f1 1c       	adc	r15, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 db8:	be 01       	movw	r22, r28
 dba:	6f 5f       	subi	r22, 0xFF	; 255
 dbc:	7f 4f       	sbci	r23, 0xFF	; 255
 dbe:	f5 01       	movw	r30, r10
 dc0:	80 81       	ld	r24, Z
 dc2:	91 81       	ldd	r25, Z+1	; 0x01
 dc4:	0e 94 6e 07 	call	0xedc	; 0xedc <itoa>
					int b=0;
 dc8:	80 e0       	ldi	r24, 0x00	; 0
 dca:	90 e0       	ldi	r25, 0x00	; 0
					while (str_buffer[b++] != 0){};
 dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <oled_write_P+0x106>
 dce:	ca 01       	movw	r24, r20
 dd0:	ac 01       	movw	r20, r24
 dd2:	4f 5f       	subi	r20, 0xFF	; 255
 dd4:	5f 4f       	sbci	r21, 0xFF	; 255
 dd6:	e1 e0       	ldi	r30, 0x01	; 1
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	ec 0f       	add	r30, r28
 ddc:	fd 1f       	adc	r31, r29
 dde:	e8 0f       	add	r30, r24
 de0:	f9 1f       	adc	r31, r25
 de2:	20 81       	ld	r18, Z
 de4:	21 11       	cpse	r18, r1
 de6:	f3 cf       	rjmp	.-26     	; 0xdce <oled_write_P+0x104>
					b--;
					if (b<move){
 de8:	2d 2d       	mov	r18, r13
 dea:	30 e0       	ldi	r19, 0x00	; 0
 dec:	82 17       	cp	r24, r18
 dee:	93 07       	cpc	r25, r19
 df0:	44 f5       	brge	.+80     	; 0xe42 <oled_write_P+0x178>
						move -=b;
 df2:	d8 1a       	sub	r13, r24
						for (tmp = 0;tmp<move;tmp++){
 df4:	20 e0       	ldi	r18, 0x00	; 0
 df6:	30 e0       	ldi	r19, 0x00	; 0
 df8:	0a c0       	rjmp	.+20     	; 0xe0e <oled_write_P+0x144>
							str_null_buffer[tmp] = '0';
 dfa:	eb e0       	ldi	r30, 0x0B	; 11
 dfc:	f0 e0       	ldi	r31, 0x00	; 0
 dfe:	ec 0f       	add	r30, r28
 e00:	fd 1f       	adc	r31, r29
 e02:	e2 0f       	add	r30, r18
 e04:	f3 1f       	adc	r31, r19
 e06:	80 e3       	ldi	r24, 0x30	; 48
 e08:	80 83       	st	Z, r24
					int b=0;
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move){
						move -=b;
						for (tmp = 0;tmp<move;tmp++){
 e0a:	2f 5f       	subi	r18, 0xFF	; 255
 e0c:	3f 4f       	sbci	r19, 0xFF	; 255
 e0e:	8d 2d       	mov	r24, r13
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	28 17       	cp	r18, r24
 e14:	39 07       	cpc	r19, r25
 e16:	8c f3       	brlt	.-30     	; 0xdfa <oled_write_P+0x130>
							str_null_buffer[tmp] = '0';
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
 e18:	eb e0       	ldi	r30, 0x0B	; 11
 e1a:	f0 e0       	ldi	r31, 0x00	; 0
 e1c:	ec 0f       	add	r30, r28
 e1e:	fd 1f       	adc	r31, r29
 e20:	e2 0f       	add	r30, r18
 e22:	f3 1f       	adc	r31, r19
 e24:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
 e26:	be 01       	movw	r22, r28
 e28:	6f 5f       	subi	r22, 0xFF	; 255
 e2a:	7f 4f       	sbci	r23, 0xFF	; 255
 e2c:	ce 01       	movw	r24, r28
 e2e:	0b 96       	adiw	r24, 0x0b	; 11
 e30:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <strcat>
						strcpy(str_buffer,str_null_buffer);
 e34:	be 01       	movw	r22, r28
 e36:	65 5f       	subi	r22, 0xF5	; 245
 e38:	7f 4f       	sbci	r23, 0xFF	; 255
 e3a:	ce 01       	movw	r24, r28
 e3c:	01 96       	adiw	r24, 0x01	; 1
 e3e:	0e 94 67 07 	call	0xece	; 0xece <strcpy>
						}
					oled_write_str (str_buffer);
 e42:	ce 01       	movw	r24, r28
 e44:	01 96       	adiw	r24, 0x01	; 1
 e46:	0e 94 58 06 	call	0xcb0	; 0xcb0 <oled_write_str>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
 e4a:	57 01       	movw	r10, r14
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					oled_write_str (str_buffer);
					move =0;
 e4c:	d1 2c       	mov	r13, r1
					break;
 e4e:	56 cf       	rjmp	.-340    	; 0xcfc <oled_write_P+0x32>
				}
		}else{
			oled_write_char (by);	
 e50:	0e 94 82 05 	call	0xb04	; 0xb04 <oled_write_char>
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
 e54:	87 01       	movw	r16, r14
 e56:	52 cf       	rjmp	.-348    	; 0xcfc <oled_write_P+0x32>
		}else{
			oled_write_char (by);	
		}
	}
	va_end(ap);
}
 e58:	64 96       	adiw	r28, 0x14	; 20
 e5a:	0f b6       	in	r0, 0x3f	; 63
 e5c:	f8 94       	cli
 e5e:	de bf       	out	0x3e, r29	; 62
 e60:	0f be       	out	0x3f, r0	; 63
 e62:	cd bf       	out	0x3d, r28	; 61
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	1f 91       	pop	r17
 e6a:	0f 91       	pop	r16
 e6c:	ff 90       	pop	r15
 e6e:	ef 90       	pop	r14
 e70:	df 90       	pop	r13
 e72:	bf 90       	pop	r11
 e74:	af 90       	pop	r10
 e76:	9f 90       	pop	r9
 e78:	8f 90       	pop	r8
 e7a:	08 95       	ret

00000e7c <atoi>:
 e7c:	fc 01       	movw	r30, r24
 e7e:	88 27       	eor	r24, r24
 e80:	99 27       	eor	r25, r25
 e82:	e8 94       	clt
 e84:	21 91       	ld	r18, Z+
 e86:	20 32       	cpi	r18, 0x20	; 32
 e88:	e9 f3       	breq	.-6      	; 0xe84 <atoi+0x8>
 e8a:	29 30       	cpi	r18, 0x09	; 9
 e8c:	10 f0       	brcs	.+4      	; 0xe92 <atoi+0x16>
 e8e:	2e 30       	cpi	r18, 0x0E	; 14
 e90:	c8 f3       	brcs	.-14     	; 0xe84 <atoi+0x8>
 e92:	2b 32       	cpi	r18, 0x2B	; 43
 e94:	41 f0       	breq	.+16     	; 0xea6 <atoi+0x2a>
 e96:	2d 32       	cpi	r18, 0x2D	; 45
 e98:	39 f4       	brne	.+14     	; 0xea8 <atoi+0x2c>
 e9a:	68 94       	set
 e9c:	04 c0       	rjmp	.+8      	; 0xea6 <atoi+0x2a>
 e9e:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulhi_const_10>
 ea2:	82 0f       	add	r24, r18
 ea4:	91 1d       	adc	r25, r1
 ea6:	21 91       	ld	r18, Z+
 ea8:	20 53       	subi	r18, 0x30	; 48
 eaa:	2a 30       	cpi	r18, 0x0A	; 10
 eac:	c0 f3       	brcs	.-16     	; 0xe9e <atoi+0x22>
 eae:	1e f4       	brtc	.+6      	; 0xeb6 <atoi+0x3a>
 eb0:	90 95       	com	r25
 eb2:	81 95       	neg	r24
 eb4:	9f 4f       	sbci	r25, 0xFF	; 255
 eb6:	08 95       	ret

00000eb8 <strcat>:
 eb8:	fb 01       	movw	r30, r22
 eba:	dc 01       	movw	r26, r24
 ebc:	0d 90       	ld	r0, X+
 ebe:	00 20       	and	r0, r0
 ec0:	e9 f7       	brne	.-6      	; 0xebc <strcat+0x4>
 ec2:	11 97       	sbiw	r26, 0x01	; 1
 ec4:	01 90       	ld	r0, Z+
 ec6:	0d 92       	st	X+, r0
 ec8:	00 20       	and	r0, r0
 eca:	e1 f7       	brne	.-8      	; 0xec4 <strcat+0xc>
 ecc:	08 95       	ret

00000ece <strcpy>:
 ece:	fb 01       	movw	r30, r22
 ed0:	dc 01       	movw	r26, r24
 ed2:	01 90       	ld	r0, Z+
 ed4:	0d 92       	st	X+, r0
 ed6:	00 20       	and	r0, r0
 ed8:	e1 f7       	brne	.-8      	; 0xed2 <strcpy+0x4>
 eda:	08 95       	ret

00000edc <itoa>:
 edc:	45 32       	cpi	r20, 0x25	; 37
 ede:	51 05       	cpc	r21, r1
 ee0:	20 f4       	brcc	.+8      	; 0xeea <itoa+0xe>
 ee2:	42 30       	cpi	r20, 0x02	; 2
 ee4:	10 f0       	brcs	.+4      	; 0xeea <itoa+0xe>
 ee6:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__itoa_ncheck>
 eea:	fb 01       	movw	r30, r22
 eec:	10 82       	st	Z, r1
 eee:	cb 01       	movw	r24, r22
 ef0:	08 95       	ret

00000ef2 <__itoa_ncheck>:
 ef2:	bb 27       	eor	r27, r27
 ef4:	4a 30       	cpi	r20, 0x0A	; 10
 ef6:	31 f4       	brne	.+12     	; 0xf04 <__itoa_ncheck+0x12>
 ef8:	99 23       	and	r25, r25
 efa:	22 f4       	brpl	.+8      	; 0xf04 <__itoa_ncheck+0x12>
 efc:	bd e2       	ldi	r27, 0x2D	; 45
 efe:	90 95       	com	r25
 f00:	81 95       	neg	r24
 f02:	9f 4f       	sbci	r25, 0xFF	; 255
 f04:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__utoa_common>

00000f08 <__mulhi_const_10>:
 f08:	7a e0       	ldi	r23, 0x0A	; 10
 f0a:	97 9f       	mul	r25, r23
 f0c:	90 2d       	mov	r25, r0
 f0e:	87 9f       	mul	r24, r23
 f10:	80 2d       	mov	r24, r0
 f12:	91 0d       	add	r25, r1
 f14:	11 24       	eor	r1, r1
 f16:	08 95       	ret

00000f18 <__utoa_ncheck>:
 f18:	bb 27       	eor	r27, r27

00000f1a <__utoa_common>:
 f1a:	fb 01       	movw	r30, r22
 f1c:	55 27       	eor	r21, r21
 f1e:	aa 27       	eor	r26, r26
 f20:	88 0f       	add	r24, r24
 f22:	99 1f       	adc	r25, r25
 f24:	aa 1f       	adc	r26, r26
 f26:	a4 17       	cp	r26, r20
 f28:	10 f0       	brcs	.+4      	; 0xf2e <__utoa_common+0x14>
 f2a:	a4 1b       	sub	r26, r20
 f2c:	83 95       	inc	r24
 f2e:	50 51       	subi	r21, 0x10	; 16
 f30:	b9 f7       	brne	.-18     	; 0xf20 <__utoa_common+0x6>
 f32:	a0 5d       	subi	r26, 0xD0	; 208
 f34:	aa 33       	cpi	r26, 0x3A	; 58
 f36:	08 f0       	brcs	.+2      	; 0xf3a <__utoa_common+0x20>
 f38:	a9 5d       	subi	r26, 0xD9	; 217
 f3a:	a1 93       	st	Z+, r26
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	79 f7       	brne	.-34     	; 0xf1e <__utoa_common+0x4>
 f40:	b1 11       	cpse	r27, r1
 f42:	b1 93       	st	Z+, r27
 f44:	11 92       	st	Z+, r1
 f46:	cb 01       	movw	r24, r22
 f48:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <strrev>

00000f4c <strrev>:
 f4c:	dc 01       	movw	r26, r24
 f4e:	fc 01       	movw	r30, r24
 f50:	67 2f       	mov	r22, r23
 f52:	71 91       	ld	r23, Z+
 f54:	77 23       	and	r23, r23
 f56:	e1 f7       	brne	.-8      	; 0xf50 <strrev+0x4>
 f58:	32 97       	sbiw	r30, 0x02	; 2
 f5a:	04 c0       	rjmp	.+8      	; 0xf64 <strrev+0x18>
 f5c:	7c 91       	ld	r23, X
 f5e:	6d 93       	st	X+, r22
 f60:	70 83       	st	Z, r23
 f62:	62 91       	ld	r22, -Z
 f64:	ae 17       	cp	r26, r30
 f66:	bf 07       	cpc	r27, r31
 f68:	c8 f3       	brcs	.-14     	; 0xf5c <strrev+0x10>
 f6a:	08 95       	ret

00000f6c <_exit>:
 f6c:	f8 94       	cli

00000f6e <__stop_program>:
 f6e:	ff cf       	rjmp	.-2      	; 0xf6e <__stop_program>
